@page "/Data/Dispositivi"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using BlazorTestCRUD.Models
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IDispositivoData _db 

<h1>Pagina Dispositivi</h1>

<h3>Inserisci nuovo dispositivo</h3>

<EditForm Model="@newDispositivo" OnValidSubmit="@InsertDispositivo">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>Matricola
    <InputText id="Matricola" @bind-Value="newDispositivo.Matricola" />
    </label><br />
    <label>Descrizione
        <InputText id="Descrizione" @bind-Value="newDispositivo.Descrizione" />
    </label><br />
    <label>Modello
        <InputText id="Modello" @bind-Value="newDispositivo.Modello" />
    </label><br />
    <button type="submit" class="btn btn-primary">Conferma Inserimento</button>
</EditForm>
<br />
<br />
<br />
<h3>Lista dei dispositivi</h3>
@if (dispositivi is null)
{
    <p><em>Caricamento...</em></p>
}
else
{

    <QuickGrid Items="dispositivi.AsQueryable()" class="table table-striped">
        <PropertyColumn Property="d => d.Matricola" Sortable="true" />
        <PropertyColumn Property="d => d.Descrizione" Sortable="true" />
        <PropertyColumn Property="d => d.Modello" Sortable="true" />
       <TemplateColumn Title="Azioni">
            <button @onclick="@(() => DeleteDispositivo(context ))">Elimina</button>
            <button @onclick="@(() => ModificaDispositivo(context))">Modifica</button>
        </TemplateColumn>
        
    </QuickGrid>

    @*<table class="table table-striped">
        <thread>
            <tr>
                <th>Matricola</th>
                <th>Descrizione</th>
                <th>Modello</th>
            </tr>
        </thread>
        <tbody>
            @foreach (var dispositivo in dispositivi)
            {
                <tr>
                    <td>@dispositivo.Matricola</td>
                    <td>@dispositivo.Descrizione</td>
                    <td>@dispositivo.Modello</td>
                </tr>
            }
        </tbody>
    </table>*@

    @if (dispositivoDaModificare != null)
    {
        <br />
        <br />
        <br />
        <h3>Sezione Modifica Dispositivo</h3>
        <div >
            <EditForm Model="@dispositivoModificato" OnValidSubmit="@UpdateDispositivo">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>
                    Matricola
                    <InputText id="Matricola" @bind-Value="dispositivoModificato.Matricola" placeholder=@dispositivoDaModificare.Matricola />
                </label><br />
                <label>
                    Descrizione
                    <InputText id="Descrizione" @bind-Value="dispositivoModificato.Descrizione" placeholder=@dispositivoDaModificare.Descrizione />
                </label><br />
                <label>
                    Modello
                    <InputText id="Modello" @bind-Value="dispositivoModificato.Modello" placeholder=@dispositivoDaModificare.Modello />
                </label><br />

                <button type="submit" class="btn btn-primary">Conferma Modifica</button>

            </EditForm>
            
        </div>

       
    }
}

@code {



    private bool HideLabel { get; set; } = false;
    private List<DispositivoModel> dispositivi;
    private DisplayDispositivoModel newDispositivo = new DisplayDispositivoModel();
    private DispositivoModel dispositivoDaModificare, dispositivoMod; 
    private DisplayDispositivoModel dispositivoModificato = new DisplayDispositivoModel();

    protected override async Task OnInitializedAsync()
    {
        dispositivi = await _db.GetDispositivo();
    }

    private async Task InsertDispositivo()
    {
        DispositivoModel d = new DispositivoModel
            {
                Matricola = newDispositivo.Matricola,
                Descrizione = newDispositivo.Descrizione,
                Modello = newDispositivo.Modello
            };
        await _db.InsertDispositivo(d);

        await OnInitializedAsync();
    }

    private async Task DeleteDispositivo(DispositivoModel d)
    {

        await _db.DeleteDispositivo(d);
        await OnInitializedAsync();

    }
    private async Task UpdateDispositivo()
    {
        dispositivoMod = new DispositivoModel
            {
                Matricola = dispositivoModificato.Matricola,
                Descrizione = dispositivoModificato.Descrizione,
                Modello = dispositivoModificato.Modello

            };

        await _db.UpdateDispositivo(dispositivoDaModificare, dispositivoMod);
        
        dispositivoDaModificare = null; 
        await OnInitializedAsync();
    }
    
    private async Task ModificaDispositivo(DispositivoModel d)
    {
        dispositivoDaModificare = new DispositivoModel
            {
                Matricola = d.Matricola,
                Descrizione = d.Descrizione,
                Modello = d.Modello
            };

        //await _db.UpdateDispositivo(d,d);

        await OnInitializedAsync();

        //dispositivoDaModificare = null;

    }

    private void Toggle()
    {
        HideLabel = !HideLabel;
    }

    private string inputValue;

    protected override void OnInitialized()
    {
        inputValue = "Inserisci un valore";
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        inputValue = e.Value?.ToString();
    }


}
